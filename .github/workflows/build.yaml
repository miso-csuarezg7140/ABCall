name: Deploy FrontEnd to Cloud Run

on:
  pull_request:
    branches: [ main ]

env:
  SERVICE_NAME: abcall

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout codigo
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Instalar dependencias
      run: |
        npm ci
        npm install -g @angular/cli
    
    - name: Ejecutar pruebas unitarias
      run: |
        # Ejecutar pruebas con cobertura
        ng test --no-watch --code-coverage

    - name: Verificar cobertura de pruebas
      run: |
        # Comprobar que el informe de cobertura existe
        if [ ! -f "coverage/coverage-summary.json" ]; then
          echo "Usando alternativa para extraer la cobertura..."
          
          # Método alternativo para lcov.info más robusto
          if [ -f "coverage/lcov.info" ]; then
            COVERAGE=$(cat coverage/lcov.info | grep -E "SF:.+\.ts$" -A 1 | grep -E "^LH:\d+$|^LF:\d+$" | \
              awk 'BEGIN {covered=0; total=0} /LH:/ {covered+=$2} /LF:/ {total+=$2} END {print (total > 0) ? (covered/total*100) : 0}')
          else
            # Extraer directamente del output del test
            COVERAGE=$(cat $(find . -name "karma-result-*.log" | sort | tail -n1) | grep -A 5 "Coverage summary" | grep "Lines" | awk '{print $3}' | tr -d '%')
            if [ -z "$COVERAGE" ]; then
              echo "Error: No se pudo extraer la cobertura"
              exit 1
            fi
          fi
        else
          # Usar el JSON summary si existe
          COVERAGE=$(cat coverage/coverage-summary.json | grep -o '"lines":{"total":[0-9]*,"covered":[0-9]*,"skipped":[0-9]*,"pct":[0-9.]*' | grep -o 'pct":[0-9.]*' | cut -d':' -f2)
        fi
        
        echo "Cobertura total: $COVERAGE%"
        
        # Verificar si la cobertura es menor que 80%
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "La cobertura de pruebas del $COVERAGE% está por debajo del límite mínimo requerido del 80%"
          exit 1
        else
          echo "La cobertura de pruebas del $COVERAGE% supera el mínimo requerido del 80%"
        fi

    - name: Verificar build Angular
      run: |
        ng build --configuration production
        if [ ! -d "dist/abcall" ]; then
          echo "Error: Build directory not found"
          exit 1
        fi

    - name: Autenticar en Google Cloud
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configurar Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.PROJECT_ID }}

    - name: Instalar componentes beta
      run: |
        gcloud components install beta --quiet

    - name: Build y Push Docker
      run: |
        gcloud auth configure-docker --quiet
        docker build --progress=plain -t gcr.io/${{ secrets.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker push gcr.io/${{ secrets.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}
        image: gcr.io/${{ secrets.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        region: ${{ secrets.REGION }}
        flags: |
          --allow-unauthenticated
          --port=8080
          --timeout=300
          --cpu=1
          --memory=512Mi
          --min-instances=1
          --max-instances=10
          --ingress=all
          --execution-environment=gen2

    - name: Verificar Deploy
      if: always()
      run: |
        echo "Verificando estado del servicio..."
        gcloud run services describe ${{ env.SERVICE_NAME }} \
        --region ${{ secrets.REGION }} \
        --format='get(status.conditions)'

        echo "Últimos logs del servicio:"
        gcloud beta run services logs read ${{ env.SERVICE_NAME }} \
        --region ${{ secrets.REGION }} \
        --limit=50